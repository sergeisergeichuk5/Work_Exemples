{
	"info": {
		"_postman_id": "fd43a3d5-d8c3-456a-a252-8ee0f67ba337",
		"name": "NETFLIX tests ENV",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29445917"
	},
	"item": [
		{
			"name": "POST addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"// Set Environmental Variable 'id' ",
							"/*",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"id\", jsonData.id);",
							"*/",
							"",
							"// // One more way to set Environmental Variable 'id'",
							"// var jsonData = JSON.parse(responseBody);",
							"// pm.environment.set(\"id\", jsonData.id);",
							"",
							"// pm.test(\"ID is correct\", function () {",
							"//     pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));",
							"// });",
							"",
							"// // What is the difference between this two tests?",
							"// pm.test(\"Body contains string id\",() => {",
							"//   pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"// });",
							"// What is the difference between this two tests?",
							"pm.test(\"Body contains string id\",() => {",
							"  pm.expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"// use the `pm.*` API to write your test",
							"// the `pm.test()` method accepts 2 parameters",
							"// the first parameter is the name of your test (be descriptive)",
							"// the second parameter is a function whereby if any assertions within your function fail, then the test will fail",
							"",
							"",
							"// Classic tests",
							"// make an assertion, if your assertion throws an error, this test will fail",
							"pm.test(\"Status 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//tests['Response latency is acceptable'] = responseTime < 1000;",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"pm.test(\"Response Size is less than 1000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"//new shorter tests",
							"tests['Response code is 200 OK'] = responseCode.code === 200;",
							"tests['Response Time is Acceptable'] = responseTime < 1000;",
							"",
							"// make as many assertions as you'd like as part of this test",
							"// if any assertion throws an error, this test will fail",
							"pm.test(\"Response assertions\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"//Response Header tests",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"//Response boby tests",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"address\": {\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{FN}}\",\r\n\t\t\t\"lastName\": \"{{LN}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{COMPANY}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"2 Golf Ave\",\r\n\t\t\"addressLine2\": \"Apt 24\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"Seatle\",\r\n\t\t\"country\": \"US\",\r\n\t\t\"subdivision\": \"WA\",\r\n\t\t\"zipCode\": \"45098\",\r\n\t\t\"phoneNumber\": \"888-888-8888\"\r\n\t},\r\n\t\"setAsDefault\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.netflix.com/browse",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"browse"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST_Make default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = true;\r",
							"} else if (responseCode.code === 401) {\r",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"The instance is not valid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"//Response Header tests\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});\r",
							"\r",
							"tests['Response Time is Acceptable'] = responseTime < 500;\r",
							"\r",
							"pm.test(\"Response Size is less than 2000B\", function () {\r",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response assertions\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"//Response boby tests\r",
							"pm.test(\"Response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string {}\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36"
					},
					{
						"key": "Content-Type",
						"value": "application/json;charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}"
				},
				"url": {
					"raw": "https://www.netflix.com/search?q=harry%20potter/default",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "harry%20potter/default"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Default address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"ID is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"FN is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));",
							"});",
							"",
							"pm.test(\"LN is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "gUzYYalnMDNs_GWQLoeXsrhGJnLYu38Mo5tk4m1J5ZQ.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIxLTEwLTA2VDA1OjI4OjQ0LjQ5MFoiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6ImFkZmQ4OWNhLTRlNjgtNDdjNi1hNzkwLWM5NDBkNmU5M2M5NyIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMS0xMC0wNlQwOToyODo0NC40OTBaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://www.netflix.com/search?q=harry%20potter",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "harry%20potter"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All addresses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"// Test without ENV",
							"pm.test(\"New ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"48ea09d1-96b0-4aab-803e-01fcd03df3e8\");",
							"});",
							"",
							"// Same test with ENV",
							"pm.test(\"Response contains correct ID\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"First Name is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"FN\"));",
							"});",
							"",
							"pm.test(\"Last Name is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LN\"));",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response size is less than 10KB\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(10240);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://www.netflix.com/search?q=harry%20potter/default",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "harry%20potter/default"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"// Test without ENV",
							"pm.test(\"firstName is correct\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Mike\");",
							"});",
							"",
							"// Same test with ENV",
							"pm.test(\"Entire response is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));",
							"    pm.expect(jsonData.address.country).to.eql(\"US\");",
							"});",
							"",
							"pm.test(\"Check isDefaultAddress\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.isDefaultAddress).to.eql(true);",
							"});",
							"",
							"pm.test(\"Check PhoneNumber\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.phoneNumber).to.eql(\"888-888-8888\");",
							"});",
							"",
							"pm.test(\"Check ZipCode\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.zipCode).to.eql(\"45098\");",
							"});",
							"",
							"pm.test(\"Check FirstName\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(\"Mike\");",
							"});",
							"",
							"pm.test(\"Check LastName\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(\"Smith\");",
							"});",
							"",
							"// Same test with ENV",
							"pm.test(\"Check FirstName and LastName\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN\"));",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.address).to.be.a('object');",
							"    pm.expect(jsonData.address.id).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName).to.be.a('object');",
							"    pm.expect(jsonData.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonData.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonData.address.country).to.be.a('string');",
							"    pm.expect(jsonData.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonData.address.city).to.be.a('string');",
							"    pm.expect(jsonData.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonData.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonData.address.addressLine2).to.be.a('string');",
							"    pm.expect(jsonData.isDefaultAddress).to.be.a('boolean');",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://www.netflix.com/search?q=harry%20potter/{{ID}}",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "harry%20potter/{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Size is less than 2000B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Address has been updated, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"address\": {\r\n\t\t\"id\": \"{{ID}}\",\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{FN_NEW}}\",\r\n\t\t\t\"lastName\": \"{{LN_NEW}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{COMPANY_NEW}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{ADR_NEW}}\",\r\n\t\t\"addressLine2\": \"Number 777\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"Bel Air\",\r\n\t\t\"country\": \"US\",\r\n\t\t\"subdivision\": \"CA\",\r\n\t\t\"zipCode\": \"90210\",\r\n\t\t\"phoneNumber\": \"888-888-8888\"\r\n\t},\r\n\t\"setAsDefault\": true,\r\n\t\"fieldMask\": {\r\n\t\t\"paths\": [\"fullName.firstName\", \"fullName.lastName\", \"company\", \"addressLine1\", \"addressLine2\", \"city\", \"country\", \"subdivision\", \"zipCode\", \"phoneNumber\", \"setAsDefault\"]\r\n\t}\r\n}"
				},
				"url": {
					"raw": "https://www.netflix.com/search?q=harry%20potter/{{ID}}",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}",
							"disabled": true
						},
						{
							"key": "company",
							"value": "{{company}}",
							"disabled": true
						},
						{
							"key": "q",
							"value": "harry%20potter/{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Updated address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"//Access by text filter",
							"pm.test(\"company is Google\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY_NEW\"));",
							"});",
							"",
							"//Access by JSON parse",
							"pm.test(\"Company is current\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    jsonData.company === (pm.environment.get(\"COMPANY_NEW\"));",
							"});",
							"",
							"// Test without ENV",
							"pm.test(\"Company is correct again\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.address.company).to.eql(\"Google\");",
							"});",
							"",
							"// Test with ENV",
							"pm.test(\"Company, ID, FN and LN is correct after update\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY_NEW\"));",
							"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));",
							"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FN_NEW\"));",
							"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LN_NEW\"));",
							"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"ADR_NEW\"));",
							"});",
							"",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.address).to.be.a('object');",
							"    pm.expect(jsonResponse.address.id).to.be.a('string');",
							"    pm.expect(jsonResponse.address.fullName).to.be.a('object');",
							"    pm.expect(jsonResponse.address.fullName.firstName).to.be.a('string');",
							"    pm.expect(jsonResponse.address.fullName.lastName).to.be.a('string');",
							"    pm.expect(jsonResponse.address.country).to.be.a('string');",
							"    pm.expect(jsonResponse.address.subdivision).to.be.a('string');",
							"    pm.expect(jsonResponse.address.city).to.be.a('string');",
							"    pm.expect(jsonResponse.address.zipCode).to.be.a('string');",
							"    pm.expect(jsonResponse.address.phoneNumber).to.be.a('string');",
							"    pm.expect(jsonResponse.address.company).to.be.a('string');",
							"    pm.expect(jsonResponse.address.addressLine1).to.be.a('string');",
							"    pm.expect(jsonResponse.isDefaultAddress).to.be.a('boolean');",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://www.netflix.com/search?q=harry%20potter/{{ID}}",
					"protocol": "https",
					"host": [
						"www",
						"netflix",
						"com"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "harry%20potter/{{ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = true;",
							"} else if (responseCode.code === 401) {",
							"    tests[\"Not authorised, Check access token or Log in\"] = false;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The instance is not valid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Size is less than 1000 B\", function () {",
							"    pm.expect(pm.response.responseSize).to.be.below(1000);",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});",
							"",
							"pm.test(\"Order has been deleted, OK\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.an('object');",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"    pm.response.to.have.jsonBody({});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "cf988df7-24ed-4d7c-ac64-a34420adc4c5",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Deleted address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad request response is expected\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The `Partner` instance is not valid. Details: `accessKey` is invalid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"// Check deleted ID in response",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"'Details' is correct\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.message).to.be.a('string');",
							"    pm.expect(jsonResponse.details).to.be.a('object');",
							"    pm.expect(jsonResponse.details.cant_find).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE address 2nd time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad request response is expected\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The `Partner` instance is not valid. Details: `accessKey` is invalid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"// Check deleted ID in response",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"'Details' is correct\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.message).to.be.a('string');",
							"    pm.expect(jsonResponse.details).to.be.a('object');",
							"    pm.expect(jsonResponse.details.cant_find).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					}
				],
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Deleted address by default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {\r",
							"    tests[\"Backend is available, response code is 200\"] = false;\r",
							"} else if (responseCode.code === 400) {\r",
							"    tests[\"Bad request response is expected\"] = true;\r",
							"} else if (responseCode.code === 403) {\r",
							"    tests[\"Forbiden\"] = false;\r",
							"} else if (responseCode.code === 404) {\r",
							"    tests[\"Not Found. Check if you made correct request\"] = false;\r",
							"} else if (responseCode.code === 422) {\r",
							"    tests[\"The `Partner` instance is not valid. Details: `accessKey` is invalid\"] = false;\r",
							"} else {\r",
							"    tests[\"Something went wrong. Check response body\"] = false;\r",
							"}\r",
							"\r",
							"// Check deleted ID in response\r",
							"pm.test(\"ID is in response\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"//Access to id inside Object if using pre request script company set\r",
							"pm.test(\"'Details' is correct\", function () {\r",
							"    const jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));\r",
							"});\r",
							"\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be in the correct format\", function() {\r",
							"    let jsonResponse = pm.response.json();\r",
							"    pm.expect(jsonResponse.message).to.be.a('string');\r",
							"    pm.expect(jsonResponse.details).to.be.a('object');\r",
							"    pm.expect(jsonResponse.details.cant_find).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Response Header is present and correct\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36"
					},
					{
						"key": "Content-Type",
						"value": "application/json;charset=UTF-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}"
				},
				"url": {
					"raw": "{{URL}}/default",
					"host": [
						"{{URL}}"
					],
					"path": [
						"default"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify Deleted Address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(responseCode.code === 200) {",
							"    tests[\"Backend is available, response code is 200\"] = false;",
							"} else if (responseCode.code === 400) {",
							"    tests[\"Bad request response is expected\"] = true;",
							"} else if (responseCode.code === 403) {",
							"    tests[\"Forbiden\"] = false;",
							"} else if (responseCode.code === 404) {",
							"    tests[\"Not Found. Check if you made correct request\"] = false;",
							"} else if (responseCode.code === 422) {",
							"    tests[\"The `Partner` instance is not valid. Details: `accessKey` is invalid\"] = false;",
							"} else {",
							"    tests[\"Something went wrong. Check response body\"] = false;",
							"}",
							"",
							"// Check deleted ID in response",
							"pm.test(\"ID is in response\", function () {",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));",
							"});",
							"",
							"//Access to id inside Object if using pre request script company set",
							"pm.test(\"'Details' is correct\", function () {",
							"    const jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.details.cant_find).to.eql('address_id: ' + pm.environment.get(\"ID\"));",
							"});",
							"",
							"pm.test(\"response should be okay to process\", function () {",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"",
							"pm.test(\"Response body should be in the correct format\", function() {",
							"    let jsonResponse = pm.response.json();",
							"    pm.expect(jsonResponse.message).to.be.a('string');",
							"    pm.expect(jsonResponse.details).to.be.a('object');",
							"    pm.expect(jsonResponse.details.cant_find).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response Header is present and correct\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");",
							"    pm.response.to.have.header(\"Connection\", \"keep-alive\");",
							"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");",
							"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "6PoPcOXszUYsiMJFuwF3G12xtH7V2mWahaWpLv5bpas.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIwLTEwLTMxVDAzOjE4OjQxLjk1M1oiLCJ1aWQiOiJhY2M4ZmM5ZS05MTBiLTRhMGQtOGEzZS00M2I5MDUyNDE3YTkiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjJhNGE5Y2YzLTExNmUtNDIyNS1hZmZhLWIzNTBlMGUyN2Y5NCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMC0xMC0zMVQwNzoxODo0MS45NTNaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"address\": {\r\n\t\t\"id\": \"{{ID}}\",\r\n\t\t\"fullName\": {\r\n\t\t\t\"firstName\": \"{{FN_NEW}}\",\r\n\t\t\t\"lastName\": \"{{LN_NEW}}\"\r\n\t\t},\r\n\t\t\"company\": \"{{COMPANY_NEW}}\",\r\n\t\t\"taxInfo\": {\r\n\t\t\t\"id\": null,\r\n\t\t\t\"type\": null\r\n\t\t},\r\n\t\t\"addressLine1\": \"{{ADR_NEW}}\",\r\n\t\t\"addressLine2\": \"Number 777\",\r\n\t\t\"street\": {\r\n\t\t\t\"name\": null,\r\n\t\t\t\"number\": null\r\n\t\t},\r\n\t\t\"city\": \"Bel Air\",\r\n\t\t\"country\": \"US\",\r\n\t\t\"subdivision\": \"CA\",\r\n\t\t\"zipCode\": \"90210\",\r\n\t\t\"phoneNumber\": \"888-888-8888\"\r\n\t},\r\n\t\"setAsDefault\": true,\r\n\t\"fieldMask\": {\r\n\t\t\"paths\": [\"fullName.firstName\", \"fullName.lastName\", \"company\", \"addressLine1\", \"addressLine2\", \"city\", \"country\", \"subdivision\", \"zipCode\", \"phoneNumber\", \"setAsDefault\"]\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{URL}}/{{ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"{{ID}}"
					],
					"query": [
						{
							"key": "id",
							"value": "{{id}}",
							"disabled": true
						},
						{
							"key": "company",
							"value": "{{company}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "ddQUVu-bmebjFD7CASh2sVoll9i2f-4BXoF41qIcNk0.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIzLTEyLTI2VDAxOjAwOjE1LjU2NloiLCJ1aWQiOiJlYjYyNmQ3Ny01MzM4LTQwMDgtYTFjNy01MjlkNjllNTE5YTIiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjA2MTJhZWM1LTFhNzktNDc1NS04ZTBmLTY4MDc2NTRhN2Y4OCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMy0xMi0yNlQwNTowMDoxNS41NjZaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}